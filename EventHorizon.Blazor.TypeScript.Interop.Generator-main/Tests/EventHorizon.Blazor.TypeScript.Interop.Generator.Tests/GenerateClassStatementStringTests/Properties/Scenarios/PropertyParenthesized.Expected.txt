/// Generated - Do Not Edit
namespace Static.Primitive
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using System.Threading.Tasks;
    using EventHorizon.Blazor.Interop;
    using EventHorizon.Blazor.Interop.Callbacks;
    using EventHorizon.Blazor.Interop.ResultCallbacks;
    using Microsoft.JSInterop;

    
    
    [JsonConverter(typeof(CachedEntityConverter<ExampleClass>))]
    public class ExampleClass : CachedEntityObject
    {
        #region Static Accessors

        #endregion

        #region Static Properties

        #endregion

        #region Static Methods

        #endregion

        #region Accessors

        #endregion

        #region Properties
        private Vector2 __wrappedHeight;
        public Vector2 wrappedHeight
        {
            get
            {
            if(__wrappedHeight == null)
            {
                __wrappedHeight = EventHorizonBlazorInterop.GetClass<Vector2>(
                    this.___guid,
                    "wrappedHeight",
                    (entity) =>
                    {
                        return new Vector2() { ___guid = entity.___guid };
                    }
                );
            }
            return __wrappedHeight;
            }
            set
            {
__wrappedHeight = null;
                EventHorizonBlazorInterop.Set(
                    this.___guid,
                    "wrappedHeight",
                    value
                );
            }
        }

        private Vector2 __height;
        public Vector2 height
        {
            get
            {
            if(__height == null)
            {
                __height = EventHorizonBlazorInterop.GetClass<Vector2>(
                    this.___guid,
                    "height",
                    (entity) =>
                    {
                        return new Vector2() { ___guid = entity.___guid };
                    }
                );
            }
            return __height;
            }
            set
            {
__height = null;
                EventHorizonBlazorInterop.Set(
                    this.___guid,
                    "height",
                    value
                );
            }
        }
        #endregion
        
        #region Constructor
        public ExampleClass() : base() { }

        public ExampleClass(
            ICachedEntity entity
        ) : base(entity)
        {
            ___guid = entity.___guid;
        }


        #endregion

        #region Methods
        #region functionType TODO: Get Comments as metadata identification
        private bool _isFunctionTypeEnabled = false;
        private readonly IDictionary<string, Func<Task>> _functionTypeActionMap = new Dictionary<string, Func<Task>>();

        public string functionType(
            Func<Task> callback
        )
        {
            SetupFunctionTypeLoop();

            var handle = Guid.NewGuid().ToString();
            _functionTypeActionMap.Add(
                handle,
                callback
            );

            return handle;
        }

        public bool functionType_Remove(
            string handle
        )
        {
            return _functionTypeActionMap.Remove(
                handle
            );
        }

        private void SetupFunctionTypeLoop()
        {
            if (_isFunctionTypeEnabled)
            {
                return;
            }
            EventHorizonBlazorInterop.FuncCallback(
                this,
                "functionType",
                "CallFunctionTypeActions",
                _invokableReference
            );
            _isFunctionTypeEnabled = true;
        }

        [JSInvokable]
        public async Task CallFunctionTypeActions()
        {
            foreach (var action in _functionTypeActionMap.Values)
            {
                await action();
            }
        }
        #endregion
        #endregion
    }
}