/// Generated - Do Not Edit
namespace Static.Class
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using System.Threading.Tasks;
    using EventHorizon.Blazor.Interop;
    using EventHorizon.Blazor.Interop.Callbacks;
    using EventHorizon.Blazor.Interop.ResultCallbacks;
    using Microsoft.JSInterop;

    
    
    [JsonConverter(typeof(CachedEntityConverter<ExampleClass>))]
    public class ExampleClass : CachedEntityObject
    {
        #region Static Accessors

        #endregion

        #region Static Properties

        #endregion

        #region Static Methods
        #region OnNewCacheEntry TODO: Get Comments as metadata identification
        private static bool IsOnNewCacheEntryEnabled = false;
        private static readonly IDictionary<string, Func<Task>> OnNewCacheEntryActionMap = new Dictionary<string, Func<Task>>();

        public static string OnNewCacheEntry(
            Func<Task> callback
        )
        {
            SetupOnNewCacheEntryStaticLoop();

            var handle = Guid.NewGuid().ToString();
            OnNewCacheEntryActionMap.Add(
                handle,
                callback
            );

            return handle;
        }

        public static bool OnNewCacheEntry_Remove(
            string handle
        )
        {
            return OnNewCacheEntryActionMap.Remove(
                handle
            );
        }

        private static void SetupOnNewCacheEntryStaticLoop()
        {
            if (IsOnNewCacheEntryEnabled)
            {
                return;
            }
            EventHorizonBlazorInterop.AssemblyFuncCallback(
                "ProjectAssembly",
                "Static.Class.ExampleClass.OnNewCacheEntry",
                "CallOnNewCacheEntryStaticActions"
            );
            IsOnNewCacheEntryEnabled = true;
        }

        [JSInvokable]
        public static async Task CallOnNewCacheEntryStaticActions()
        {
            foreach (var action in OnNewCacheEntryActionMap.Values)
            {
                await action();
            }
        }
        #endregion
        #endregion

        #region Accessors

        #endregion

        #region Properties

        #endregion
        
        #region Constructor
        public ExampleClass() : base() { }

        public ExampleClass(
            ICachedEntity entity
        ) : base(entity)
        {
            ___guid = entity.___guid;
        }


        #endregion

        #region Methods

        #endregion
    }
}